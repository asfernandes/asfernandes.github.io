{"pageProps":{"postData":{"id":["2023","02","16","firebird-embedded-android-cpp"],"contentHtml":"<p>This example shows how to use Firebird embedded in an Android app using C++.</p>\n<p>The example project is <a href=\"https://github.com/FirebirdSQL/examples/tree/main/android-cpp\">here</a>.</p>\n<p>The app is initialized using Kotlin and talks with a native C++ module that talks to Firebird.</p>\n<p>As a first step, create an Android project using Android Studio.</p>\n<p>Application has been created using <code>targetSdk 32</code> but we need to change it to <code>targetSdk 33</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-diff\"><code class=\"language-diff\">commit 7dfecc8af7f9f310c3f4b621c204dde01652aa82\nAuthor: Adriano dos Santos Fernandes &#x3C;adrianosf@gmail.com>\nDate:   Wed Feb 15 21:42:28 2023 -0300\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   Set compileSdk to 33.</span>\n<span class=\"token line\"></span></span>\ndiff --git a/android-cpp/app/build.gradle b/android-cpp/app/build.gradle\nindex 5aa45e5..10a1fdd 100644\n<span class=\"token coord\">--- a/android-cpp/app/build.gradle</span>\n<span class=\"token coord\">+++ b/android-cpp/app/build.gradle</span>\n@@ -4,7 +4,7 @@ plugins {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">}</span>\n<span class=\"token line\"></span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">android {</span>\n<span class=\"token line\"></span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">    compileSdk 32</span>\n<span class=\"token line\"></span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    compileSdk 33</span>\n<span class=\"token line\"></span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    defaultConfig {</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        applicationId \"com.example.firebirdandroidcpp\"</span></span>\n</code></pre></div>\n<p>Then we need to download a <code>Firebird embedded AAR</code> - an Android archive with Firebird libraries compiled to the four Android ABIs (armeabi-v7a, arm64-v8a, x86, x86_64).</p>\n<p>Currently only Firebird 5 beta snapshots are bundled as AAR and they can be downloaded from <a href=\"https://github.com/FirebirdSQL/snapshots/releases/tag/snapshot-master\">https://github.com/FirebirdSQL/snapshots/releases/tag/snapshot-master</a>.\nDon't rely on them for important work.</p>\n<p>We will download the file and save as <code>android-cpp/app/libs/Firebird-5.0.0-android-embedded.aar</code>.</p>\n<p>We need to reference this file in Android app' <code>build.gradle</code> file:</p>\n<div class=\"remark-highlight\"><pre class=\"language-diff\"><code class=\"language-diff\">commit 151d490dc86bf74990e0558117b45826e633f410\nAuthor: Adriano dos Santos Fernandes &#x3C;adrianosf@gmail.com>\nDate:   Wed Feb 15 21:42:28 2023 -0300\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   Reference libs/Firebird-5.0.0-android-embedded.aar.</span>\n<span class=\"token line\"></span></span>\ndiff --git a/android-cpp/app/build.gradle b/android-cpp/app/build.gradle\nindex 10a1fdd..6991758 100644\n<span class=\"token coord\">--- a/android-cpp/app/build.gradle</span>\n<span class=\"token coord\">+++ b/android-cpp/app/build.gradle</span>\n@@ -54,4 +54,6 @@ dependencies {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    testImplementation 'junit:junit:4.13.2'</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    androidTestImplementation 'androidx.test.ext:junit:1.1.5'</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'</span>\n<span class=\"token line\"></span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">}</span>\n<span class=\"token line\"></span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"></span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\">    implementation files('libs/Firebird-5.0.0-android-embedded.aar')</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\">}</span></span>\n</code></pre></div>\n<p>Then we will grab Firebird's <code>include</code> directory and put in <code>android-cpp/app/src/main/cpp/include</code>.\nThese files are not present in the <code>AAR</code> file, so it must be get from a non-Android kit.</p>\n<p>We are going to configure <code>cmake</code> to treat this directory as an <code>include</code> directory:</p>\n<div class=\"remark-highlight\"><pre class=\"language-diff\"><code class=\"language-diff\">commit c8a78dbf6cebba57babf47378c8eb69529808aad\nAuthor: Adriano dos Santos Fernandes &#x3C;adrianosf@gmail.com>\nDate:   Wed Feb 15 21:42:28 2023 -0300\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   Add app/src/main/cpp/include to CMake include path.</span>\n<span class=\"token line\"></span></span>\ndiff --git a/android-cpp/app/src/main/cpp/CMakeLists.txt b/android-cpp/app/src/main/cpp/CMakeLists.txt\nindex d0ecd00..9233a7b 100644\n<span class=\"token coord\">--- a/android-cpp/app/src/main/cpp/CMakeLists.txt</span>\n<span class=\"token coord\">+++ b/android-cpp/app/src/main/cpp/CMakeLists.txt</span>\n@@ -36,6 +36,10 @@ find_library( # Sets the name of the path variable.\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        # you want CMake to locate.</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        log)</span>\n<span class=\"token line\"></span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">target_include_directories(</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        firebirdandroidcpp PUBLIC</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        $&#x3C;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)</span>\n<span class=\"token line\"></span><span class=\"token prefix inserted\">+</span><span class=\"token line\"></span>\n<span class=\"token line\"></span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"># Specifies libraries CMake should link to your target library. You</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"># can link multiple libraries, such as libraries you define in this</span>\n<span class=\"token line\"></span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"># build script, prebuilt third-party libraries, or system libraries.</span></span>\n</code></pre></div>\n<p>We are then going to change the scaffolded app with the code we need.</p>\n<p>In <code>android-cpp/app/src/main/java/com/example/firebirdandroidcpp/MainActivity.kt</code> we need to put our code in the <code>MainActivity.onCreate</code> method, that's going to be as this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n\n    FirebirdConf<span class=\"token punctuation\">.</span><span class=\"token function\">extractAssets</span><span class=\"token punctuation\">(</span>baseContext<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    FirebirdConf<span class=\"token punctuation\">.</span><span class=\"token function\">setEnv</span><span class=\"token punctuation\">(</span>baseContext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token function\">File</span><span class=\"token punctuation\">(</span>filesDir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.fdb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>absolutePath<span class=\"token punctuation\">)</span>\n\n    binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        binding<span class=\"token punctuation\">.</span>sampleText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        binding<span class=\"token punctuation\">.</span>sampleText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"Error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>e<span class=\"token punctuation\">.</span>message<span class=\"token delimiter variable\">}</span></span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>FirebirdConf</code> class (imported from <code>org.firebirdsql.android.embedded.FirebirdConf</code>) has helper functions to setup Firebird usage in Android.</p>\n<p><code>FirebirdConf.extractAssets</code> extracts bundled config and data files as Firebird cannot work with them bundled. <code>FirebirdConf.setEnv</code> sets necessary environment variables so Firebird know where these files are.</p>\n<p><code>connect(File(filesDir, \"test.fdb\").absolutePath)</code> is the call for the native C++ method we are going to create that connects to the database or create it when it does not exist.</p>\n<p>The <code>binding.sampleText.text = getCurrentTimestamp()</code> line gets the <code>CURRENT_TIMESTAMP</code> using a Firebird query.</p>\n<p>It's also good to release resources, so we are going to create an <code>onDestroy</code> method that calls our own <code>disconnect</code> native C++ method:</p>\n<div class=\"remark-highlight\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As a final step in the Kotlin file, we need to declare the external C++ methods:</p>\n<div class=\"remark-highlight\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>databaseName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getCurrentTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n</code></pre></div>\n<p>Now we are going to put the C++ code that is in the middle between the Kotlin app and Firebird.</p>\n<p>This file has nothing very special. It's just standard C++ code that interfaces with JNI and also with Firebird.</p>\n<p>Since Firebird raw API is not very ease to use, others libraries may be used too.</p>\n<p>We start with the C++ headers:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;jni.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;exception></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;dlfcn.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"firebird/Interface.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"firebird/Message.h\"</span></span>\n</code></pre></div>\n<p>Then some things to make easier to use the Firebird library:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">namespace fb <span class=\"token operator\">=</span> Firebird<span class=\"token punctuation\">;</span>\n\nusing GetMasterPtr <span class=\"token operator\">=</span> <span class=\"token function\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>fb<span class=\"token operator\">::</span>fb_get_master_interface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> constexpr <span class=\"token keyword\">auto</span> LIB_FBCLIENT <span class=\"token operator\">=</span> <span class=\"token string\">\"libfbclient.so\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> constexpr <span class=\"token keyword\">auto</span> SYMBOL_GET_MASTER_INTERFACE <span class=\"token operator\">=</span> <span class=\"token string\">\"fb_get_master_interface\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And the global variables that stores the loaded library and active connection:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> GetMasterPtr masterFunc <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> fb<span class=\"token operator\">::</span>IMaster<span class=\"token operator\">*</span> master <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> fb<span class=\"token operator\">::</span>IUtil<span class=\"token operator\">*</span> util <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> fb<span class=\"token operator\">::</span>IProvider<span class=\"token operator\">*</span> dispatcher <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> fb<span class=\"token operator\">::</span>IStatus<span class=\"token operator\">*</span> status <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>fb<span class=\"token operator\">::</span>ThrowStatusWrapper<span class=\"token operator\">></span> statusWrapper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> fb<span class=\"token operator\">::</span>IAttachment<span class=\"token operator\">*</span> attachment <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The more important functions are <code>loadLibrary</code>, <code>unloadLibrary</code>, <code>connect</code>, <code>disconnect</code> and <code>getCurrentTimestamp</code>, that are the code indirectly called by the Kotlin external methods and actually interface with Firebird. These functions are coded in a way that they do not deal with JNI:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Loads Firebird library and get main interfaces.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>handle <span class=\"token operator\">=</span> <span class=\"token function\">dlopen</span><span class=\"token punctuation\">(</span>LIB_FBCLIENT<span class=\"token punctuation\">,</span> RTLD_NOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        throw std<span class=\"token operator\">::</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error loading Firebird client library.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>masterFunc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>GetMasterPtr<span class=\"token punctuation\">)</span> <span class=\"token function\">dlsym</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> SYMBOL_GET_MASTER_INTERFACE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dlclose</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handle <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n        throw std<span class=\"token operator\">::</span><span class=\"token function\">runtime_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error getting Firebird master interface.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    master <span class=\"token operator\">=</span> <span class=\"token function\">masterFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    util <span class=\"token operator\">=</span> master<span class=\"token operator\">-></span><span class=\"token function\">getUtilInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dispatcher <span class=\"token operator\">=</span> master<span class=\"token operator\">-></span><span class=\"token function\">getDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> master<span class=\"token operator\">-></span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    statusWrapper <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&#x3C;</span>fb<span class=\"token operator\">::</span>ThrowStatusWrapper<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unloads Firebird library.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unloadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token operator\">-></span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span>statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fb_shutrsn_app_stopped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        status<span class=\"token operator\">-></span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dispatcher<span class=\"token operator\">-></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dlclose</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handle <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Connects to Firebird database. Creates it if necessary.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string databaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    try <span class=\"token punctuation\">{</span>\n        attachment <span class=\"token operator\">=</span> dispatcher<span class=\"token operator\">-></span><span class=\"token function\">attachDatabase</span><span class=\"token punctuation\">(</span>\n            statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            databaseName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fb<span class=\"token operator\">::</span>FbException<span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        attachment <span class=\"token operator\">=</span> dispatcher<span class=\"token operator\">-></span><span class=\"token function\">createDatabase</span><span class=\"token punctuation\">(</span>\n            statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            databaseName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Disconnects the database.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attachment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        attachment<span class=\"token operator\">-></span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachment<span class=\"token operator\">-></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attachment <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">unloadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Query CURRENT_TIMESTAMP using a Firebird query.</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getCurrentTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> transaction <span class=\"token operator\">=</span> attachment<span class=\"token operator\">-></span><span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span>statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">FB_MESSAGE</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> fb<span class=\"token operator\">::</span>ThrowStatusWrapper<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">FB_VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentTimestamp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> master<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    attachment<span class=\"token operator\">-></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n        statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        transaction<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"select current_timestamp from rdb$database\"</span><span class=\"token punctuation\">,</span>\n        SQL_DIALECT_CURRENT<span class=\"token punctuation\">,</span>\n        nullptr<span class=\"token punctuation\">,</span>\n        nullptr<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    transaction<span class=\"token operator\">-></span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>statusWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    transaction<span class=\"token operator\">-></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">-></span>currentTimestamp<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">,</span> message<span class=\"token operator\">-></span>currentTimestamp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The functions (<code>Java_com_example_firebirdandroidcpp_MainActivity_*</code>) are the directly ones called by the Kotlin code and they deal with JNI-specific types and exceptions, passing actual work for the above functions:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// JNI JMainActivity.connect.</span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> JNIEXPORT\n<span class=\"token keyword\">void</span> JNICALL <span class=\"token function\">Java_com_example_firebirdandroidcpp_MainActivity_connect</span><span class=\"token punctuation\">(</span>\n        JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jobject self<span class=\"token punctuation\">,</span> jstring databaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    try <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token function\">convertJString</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> databaseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">jniRethrow</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// JNI JMainActivity.disconnect.</span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> JNIEXPORT\n<span class=\"token keyword\">void</span> JNICALL <span class=\"token function\">Java_com_example_firebirdandroidcpp_MainActivity_disconnect</span><span class=\"token punctuation\">(</span>\n        JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jobject self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    try <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">jniRethrow</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// JNI JMainActivity.getCurrentTimestamp.</span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> JNIEXPORT\njstring JNICALL <span class=\"token function\">Java_com_example_firebirdandroidcpp_MainActivity_getCurrentTimestamp</span><span class=\"token punctuation\">(</span>\n        JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jobject self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    try <span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>string currentTimestamp <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> env<span class=\"token operator\">-></span><span class=\"token function\">NewStringUTF</span><span class=\"token punctuation\">(</span>currentTimestamp<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">jniRethrow</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The only missing piece of native code is the JNI helper functions.\n<code>convertJString</code> converts JNI string to <code>std::string</code> and <code>jniRethrow</code> converts C++ exception to Android exceptions:</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Converts JNI string to std::string.</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">convertJString</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jstring str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> len <span class=\"token operator\">=</span> env<span class=\"token operator\">-></span><span class=\"token function\">GetStringUTFLength</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> strChars <span class=\"token operator\">=</span> env<span class=\"token operator\">-></span><span class=\"token function\">GetStringUTFChars</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>strChars<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    env<span class=\"token operator\">-></span><span class=\"token function\">ReleaseStringUTFChars</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> strChars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Rethrow C++ as JNI exception.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jniRethrow</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>string message<span class=\"token punctuation\">;</span>\n\n    try <span class=\"token punctuation\">{</span>\n        throw<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fb<span class=\"token operator\">::</span>FbException<span class=\"token operator\">&#x26;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        util<span class=\"token operator\">-></span><span class=\"token function\">formatStatus</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>exception<span class=\"token operator\">&#x26;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        message <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string\">\"Unrecognized C++ exception\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> exception <span class=\"token operator\">=</span> env<span class=\"token operator\">-></span><span class=\"token function\">FindClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java/lang/Exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    env<span class=\"token operator\">-></span><span class=\"token function\">ThrowNew</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","layout":"post","title":"Firebird embedded usage in an Android app using C++","published":true,"date":"2023-02-16","author":"Adriano dos Santos Fernandes","tags":["firebird","android","c++"]}},"__N_SSG":true}