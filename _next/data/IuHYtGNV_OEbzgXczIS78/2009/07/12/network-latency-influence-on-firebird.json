{"pageProps":{"postData":{"id":["2009","07","12","network-latency-influence-on-firebird"],"contentHtml":"<p>People often talk that Firebird performs badly in networks with high latency. I did some tests to see how the new protocol has been improved compared to the old one, and to see how it could be improved even more. My tests only cares about <strong>latency</strong>, and not about bandwidth.</p>\n<p>It simulate network latency in Linux using <a href=\"http://www.linuxfoundation.org/en/Net:Netem\">Netem</a>. With the <code>tc</code> utility, we can add a delay for outbound traffic. Since I did it for <em>lo</em> interface, it happens that it works for in/out traffic. I set delay to 100ms (that is more or less a value I found doing it in the internet with my horrible Telefonica <del>speed</del>y connection), using this command:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> tc qdisc <span class=\"token function\">add</span> dev lo root handle <span class=\"token number\">1</span>:0 netem delay 100ms\n</code></pre></div>\n<p>And here is the result of a <code>ping</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ping</span> localhost\nPING localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n<span class=\"token number\">64</span> bytes from localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">200</span> ms\n<span class=\"token number\">64</span> bytes from localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">200</span> ms\n<span class=\"token number\">64</span> bytes from localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">200</span> ms\n<span class=\"token number\">64</span> bytes from localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">200</span> ms\n</code></pre></div>\n<p>To later remove the delay, the command is:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> tc qdisc del dev lo root\n</code></pre></div>\n<p>The test uses <a href=\"http://code.google.com/p/cppsys/source/browse/#svn/trunk/src/CppSys/Database/Firebird\">Firebird library</a> present on (my till unknown) <a href=\"http://code.google.com/p/cppsys\">CppSys</a> project (more on CppSys in a future post). The CppSys database library has interfaces and semantics based on JDBC. The relevant test code is here:</p>\n<div class=\"remark-highlight\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to the database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbDatabase<span class=\"token operator\">></span> <span class=\"token function\">database</span><span class=\"token punctuation\">(</span>client<span class=\"token operator\">-></span><span class=\"token function\">openDatabase</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firebird:\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> databaseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting the transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbTransaction<span class=\"token operator\">></span> <span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">-></span><span class=\"token function\">startTransaction</span><span class=\"token punctuation\">(</span>\n    TransactionIsolation<span class=\"token operator\">::</span>SNAPSHOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Preparing stmt1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbPreparedStatement<span class=\"token operator\">></span> <span class=\"token function\">stmt1</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">-></span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n    transaction<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select rdb$relation_name from rdb$relations\"</span>\n    <span class=\"token string\">\"    where rdb$system_flag = 1\"</span>\n    <span class=\"token string\">\"    order by rdb$relation_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Preparing stmt2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbPreparedStatement<span class=\"token operator\">></span> <span class=\"token function\">stmt2</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">-></span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n    transaction<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select rdb$field_name from rdb$relation_fields\"</span>\n    <span class=\"token string\">\"    where rdb$relation_name = ?\"</span>\n    <span class=\"token string\">\"    order by rdb$field_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Preparing stmt3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbPreparedStatement<span class=\"token operator\">></span> <span class=\"token function\">stmt3</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">-></span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>\n    transaction<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select rdb$trigger_name from rdb$triggers\"</span>\n    <span class=\"token string\">\"    where rdb$relation_name = ?\"</span>\n    <span class=\"token string\">\"    order by rdb$trigger_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing stmt1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAutoPtr<span class=\"token operator\">&#x3C;</span>FbResultSet<span class=\"token operator\">></span> <span class=\"token function\">rs1</span><span class=\"token punctuation\">(</span>stmt1<span class=\"token operator\">-></span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting fetch rs1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs1<span class=\"token operator\">-></span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rs1: %s\"</span><span class=\"token punctuation\">,</span> rs1<span class=\"token operator\">-></span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tExecuting stmt2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stmt2<span class=\"token operator\">-></span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rs1<span class=\"token operator\">-></span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    AutoPtr<span class=\"token operator\">&#x3C;</span>FbResultSet<span class=\"token operator\">></span> <span class=\"token function\">rs2</span><span class=\"token punctuation\">(</span>stmt2<span class=\"token operator\">-></span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tExecuting stmt3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stmt3<span class=\"token operator\">-></span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rs1<span class=\"token operator\">-></span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    AutoPtr<span class=\"token operator\">&#x3C;</span>FbResultSet<span class=\"token operator\">></span> <span class=\"token function\">rs3</span><span class=\"token punctuation\">(</span>stmt3<span class=\"token operator\">-></span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tStarting fetch rs2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs2<span class=\"token operator\">-></span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\trs2: %s\"</span><span class=\"token punctuation\">,</span> rs2<span class=\"token operator\">-></span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tStarting fetch rs3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs3<span class=\"token operator\">-></span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\trs3: %s\"</span><span class=\"token punctuation\">,</span> rs3<span class=\"token operator\">-></span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <em>println</em> function buffers the text and prints it in its next run, with the current time (in minus) milliseconds the time when the text was buffered. Here is its code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> lineBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> int64 lastTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    timeb tb<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ftime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    int64 thisTime <span class=\"token operator\">=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> tb<span class=\"token punctuation\">.</span>millitm<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastTime <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        lastTime <span class=\"token operator\">=</span> thisTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%06d: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>thisTime <span class=\"token operator\">-</span> lastTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            lineBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    va_list va<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">vsprintf</span><span class=\"token punctuation\">(</span>lineBuffer<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lastTime <span class=\"token operator\">=</span> thisTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you see, the test does what every client/server database developer must knows that he/she shouldn't do: a main query with nested queries for each record. If you ever run <code>isql</code> over the internet, you had see it performs very slow, and that is the reason. <code>isql</code> does just that. It does that because it's written using embedded SQL with <code>gpre</code> and sometimes this is needed to access new columns that may not be presented on a database of an older ODS. And due to embedded SQL nature, \"details\" of where and when to prepare statements are just ignored.</p>\n<p>So far, here is the results.</p>\n<p>Result for the <strong>old protocol</strong>, with 2.0 client and 2.5 server:</p>\n<div class=\"remark-highlight\"><pre class=\"language-txt\"><code class=\"language-txt\">000665: Connecting to the database\n000201: Starting the transaction\n001234: Preparing stmt1\n001204: Preparing stmt2\n001204: Preparing stmt3\n000200: Executing stmt1\n000202: Starting fetch rs1\n000000: rs1: MON$ATTACHMENTS\n000200:     Executing stmt2\n000201:     Executing stmt3\n000201:     Starting fetch rs2\n000000:     rs2: MON$ATTACHMENT_ID\n000000:     rs2: MON$ATTACHMENT_NAME\n000000:     rs2: MON$CHARACTER_SET_ID\n000001:     rs2: MON$GARBAGE_COLLECTION\n000000:     rs2: MON$REMOTE_ADDRESS\n000000:     rs2: MON$REMOTE_PID\n000000:     rs2: MON$REMOTE_PROCESS\n000001:     rs2: MON$REMOTE_PROTOCOL\n000000:     rs2: MON$ROLE\n000000:     rs2: MON$SERVER_PID\n000000:     rs2: MON$STATE\n000001:     rs2: MON$STAT_ID\n000000:     rs2: MON$TIMESTAMP\n000000:     rs2: MON$USER\n000601:     Starting fetch rs3\n000000: rs1: MON$CALL_STACK\n000200:     Executing stmt2\n000201:     Executing stmt3\n000201:     Starting fetch rs2\n000000:     rs2: MON$CALLER_ID\n000000:     rs2: MON$CALL_ID\n000000:     rs2: MON$OBJECT_NAME\n000000:     rs2: MON$OBJECT_TYPE\n000000:     rs2: MON$SOURCE_COLUMN\n000000:     rs2: MON$SOURCE_LINE\n000000:     rs2: MON$STATEMENT_ID\n000001:     rs2: MON$STAT_ID\n000000:     rs2: MON$TIMESTAMP\n000601:     Starting fetch rs3\n&#x26;lt;...&#x26;gt;\n000000: rs1: RDB$CHECK_CONSTRAINTS\n000200:     Executing stmt2\n000200:     Executing stmt3\n000200:     Starting fetch rs2\n000001:     rs2: RDB$CONSTRAINT_NAME\n000000:     rs2: RDB$TRIGGER_NAME\n000200:     Starting fetch rs3\n000000:     rs3: RDB$TRIGGER_14\n000000:     rs3: RDB$TRIGGER_15\n000001:     rs3: RDB$TRIGGER_16\n000400:     rs3: RDB$TRIGGER_35\n000000: rs1: RDB$COLLATIONS\n&#x26;lt;...&#x26;gt;</code></pre></div>\n<p>Result for the <strong>new protocol</strong>, with 2.5 client and 2.5 server:</p>\n<div class=\"remark-highlight\"><pre class=\"language-txt\"><code class=\"language-txt\">000670: Connecting to the database\n000200: Starting the transaction\n000229: Preparing stmt1\n000203: Preparing stmt2\n000203: Preparing stmt3\n000000: Executing stmt1\n000202: Starting fetch rs1\n000000: rs1: MON$ATTACHMENTS\n000000:     Executing stmt2\n000000:     Executing stmt3\n000202:     Starting fetch rs2\n000000:     rs2: MON$ATTACHMENT_ID\n000000:     rs2: MON$ATTACHMENT_NAME\n000000:     rs2: MON$CHARACTER_SET_ID\n000000:     rs2: MON$GARBAGE_COLLECTION\n000000:     rs2: MON$REMOTE_ADDRESS\n000000:     rs2: MON$REMOTE_PID\n000000:     rs2: MON$REMOTE_PROCESS\n000000:     rs2: MON$REMOTE_PROTOCOL\n000000:     rs2: MON$ROLE\n000000:     rs2: MON$SERVER_PID\n000000:     rs2: MON$STATE\n000000:     rs2: MON$STAT_ID\n000000:     rs2: MON$TIMESTAMP\n000000:     rs2: MON$USER\n000200:     Starting fetch rs3\n000000: rs1: MON$CALL_STACK\n000001:     Executing stmt2\n000000:     Executing stmt3\n000200:     Starting fetch rs2\n000000:     rs2: MON$CALLER_ID\n000000:     rs2: MON$CALL_ID\n000000:     rs2: MON$OBJECT_NAME\n000001:     rs2: MON$OBJECT_TYPE\n000000:     rs2: MON$SOURCE_COLUMN\n000000:     rs2: MON$SOURCE_LINE\n000000:     rs2: MON$STATEMENT_ID\n000000:     rs2: MON$STAT_ID\n000000:     rs2: MON$TIMESTAMP\n000200:     Starting fetch rs3\n&#x26;lt;...&#x26;gt;\n000000: rs1: RDB$CHECK_CONSTRAINTS\n000000:     Executing stmt2\n000000:     Executing stmt3\n000201:     Starting fetch rs2\n000000:     rs2: RDB$CONSTRAINT_NAME\n000000:     rs2: RDB$TRIGGER_NAME\n000200:     Starting fetch rs3\n000000:     rs3: RDB$TRIGGER_14\n000000:     rs3: RDB$TRIGGER_15\n000000:     rs3: RDB$TRIGGER_16\n000000:     rs3: RDB$TRIGGER_35\n000000: rs1: RDB$COLLATIONS\n&#x26;lt;...&#x26;gt;</code></pre></div>\n<p>FWIW, I did tested the old protocol on real network with similar latency too. The result was very resemblant.</p>\n<p>The total times are:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Old protocol</td>\n<td>55.5s</td>\n</tr>\n<tr>\n<td>New Protocol</td>\n<td>18.5s</td>\n</tr>\n<tr>\n<td>New Protocol minus round-trip times of rs3</td>\n<td>10.1s</td>\n</tr>\n</tbody>\n</table>\n<p>So we may see that:</p>\n<ol>\n<li>The old protocol is a crap.</li>\n<li>The new protocol does a good job removing some \"unnecessary\" round-trips.</li>\n<li>It may be improved.</li>\n</ol>\n<p>The first interesting problem is the series of statement preparations. The preparation of a statement may result in an error, so it necessary involves a round-trip so we can get the status from the server. But does it <strong>really needs</strong> it? Using Oracle JDBC driver, a prepareStatement with a wrong statement does not throw an exception. It's deferred. In fact, this is a contract, and a change in a contract would require some way for the client applications to enable or disable it.</p>\n<p>The second interesting thing is that executing a statement that needs fetch does not involves a round-trip. Does it happens too when selecting from a SP? Won't this be a contract change as well, since selectable SPs could write to the database? I didn't did further tests... Anyway, that's what allows the optimizations I talk below.</p>\n<p>Then we start the fetches. The first fetch for rs1 necessarily involves a round-trip and buffers some records in the client. Subsequents fetches are resolved locally.</p>\n<p>The third interesting thing is about the nested queries. Since queries are executed, a round-trip would be inevitable, but it does one for each query. A more intelligent approach would be to fetch rs3 too when asked to fetch rs2, since it's already executed. In this test, it would run ~8s faster. And a much more intelligent approach would do it in the background (and transmitting asynchronous), without putting some overhead on the rs2 call.</p>\n<p>With a super intelligent server/client/protocol, the client and the server may cache prepared statements, and the server may asynchronous send statements invalidations to the client. Then, preparation of statements would have no round-trip (when already prepared one time), being sure that the statement is not wrong.</p>\n<p>So what you may do now?</p>\n<ol>\n<li>Do not talk with the server in this poor (and common) way. Use selectable SPs to run multiple queries.</li>\n<li>Do not prepare/close/prepare your common statements. Cache them in your application.</li>\n</ol>\n","layout":"post","title":"Influence of network latency in the Firebird wire protocol","published":true,"date":"2009-07-12T23:25:00.001-03:00","author":"Adriano dos Santos Fernandes","tags":["firebird"],"modified_time":"2009-07-14T22:35:29.360-03:00"}},"__N_SSG":true}