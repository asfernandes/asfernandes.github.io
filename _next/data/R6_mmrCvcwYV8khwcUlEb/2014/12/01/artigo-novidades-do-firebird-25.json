{"pageProps":{"postData":{"id":["2014","12","01","artigo-novidades-do-firebird-25"],"contentHtml":"<p>A linguagem procedural do Firebird, a PSQL, foi incrementada com novos comandos e outras melhorias. A primeira melhoria que irei apresentar se trata do uso de subqueries como expressões PSQL. Antes, o desenvolvedor era obrigado a criar uma variável e fazer um <code>SELECT INTO</code> para obter um valor e usá-lo posteriormente em outro comando. Agora as subqueries fazem parte do conjunto de expressões PSQL e podem ser usadas da mesma maneira que já podiam ser usadas em comandos SQL. A <a href=\"#listagem15\">listagem 15</a> mostra o uso de uma subquery em uma comparação e em seguida na atribuição de um valor retornado a uma variável.</p>\n<p><a name=\"listagem15\">Listagem 15</a>: Usando subqueries como expressões PSQL.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> TERM <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span> BLOCK <span class=\"token keyword\">RETURNS</span> <span class=\"token punctuation\">(</span>COD <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DOCUMENTOS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">THEN</span>\n  <span class=\"token keyword\">BEGIN</span>\n     COD <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>CODIGO<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DOCUMENTOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     SUSPEND<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<p>Na <a href=\"#listagem15\">listagem 15</a> o parâmetro de retorno COD foi definido com o tipo <code>VARCHAR(10)</code> e recebe um valor lido da coluna CODIGO da tabela DOCUMENTOS. Uma alteração do tipo desta coluna poderia deixar este bloco de código inconsistente ou inválido. No Firebird 2.1 foi adicionado o suporte ao uso de domains em PSQL. Neste caso, o desenvolvedor precisaria criar um domínio e usá-lo na definição da tabela e na definição do parâmetro de retorno do <code>EXECUTE BLOCK</code> para ter um código consistente. Dependendo da situação, a criação de domínios para todas as colunas pode se tornar uma tarefa extremamente burocrática. Pensando nisso, o Firebird 2.5 adiciona a cláusula <code>TYPE OF COLUMN</code>. Com essa cláusula é possível declarar parâmetros e variáveis ou fazer casts usando o tipo definido de uma coluna. Ao alterar o tipo da coluna, a alteração se reflete automaticamente em todas as stored procedures e triggers que façam uso de seu tipo. A <a href=\"#listagem16\">listagem 16</a> mostra o mesmo código da <a href=\"#listagem15\">listagem 15</a> mas usando <code>TYPE OF COLUMN</code> para o parâmetro COD.</p>\n<p><a name=\"listagem16\">Listagem 16</a>: Usando a cláusula <code>TYPE OF COLUMN</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">EXECUTE</span> BLOCK <span class=\"token keyword\">RETURNS</span> <span class=\"token punctuation\">(</span>COD <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">OF</span> <span class=\"token keyword\">COLUMN</span> DOCUMENTOS<span class=\"token punctuation\">.</span>CODIGO<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DOCUMENTOS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">THEN</span>\n  <span class=\"token keyword\">BEGIN</span>\n     COD <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>CODIGO<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DOCUMENTOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     SUSPEND<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<p>No Firebird 2.1 foram acrescentados os triggers de eventos de banco de dados, como o evento ON CONNECT. Uma das funcionalidades que podiam ser feitas com este tipo de trigger era a rejeição de uma conexão, permitindo que os desenvolvedores implementassem um sistema de segurança dentro do banco de dados. Para rejeitar uma conexão é necessário lançar uma exceção dentro do trigger. Nota: este tipo de segurança não impede que o usuário SYSDBA tenha acesso ao banco, pois os administradores podem desativar os triggers de banco de dados conectando-se usando a opção -nodbtriggers do ISQL. O problema é que alguns desenvolvedores gostariam de gravar uma entrada em uma tabela de log registrando o evento, mas a exceção causava o rollback da criação deste registro. Esta e outras situações (como comunicação com outros sistemas através de UDFs) agora podem se beneficiar de um novo comando, o <code>IN AUTONOMOUS TRANSACTION</code>. Assim como um <code>IF</code> ou <code>WHILE</code>, este comando aceita um subcomando (ou vários, com o uso de BEGIN END). No início da execução do <code>IN AUTONOMOUS TRANSACTION</code> é aberta uma nova transação e o subcomando é executado dentro desta transação. Caso o subcomando execute por completo, é feito um <code>COMMIT</code> na transação criada. Caso ocorra uma exceção, é feito um rollback. A <a href=\"#listagem17\">listagem 17</a> apresenta um trigger ON CONNECT que aceita apenas conexões dos usuários SYSDBA e ADMIN e grava o nome dos outros usuários que tiverem a conexão rejeitada. Note que a exceção usada para rejeitar a conexão é lançada fora do bloco <code>IN AUTONOMOUS TRANSACTION</code>, que já havia terminado e, consequentemente, inserido o registro e finalizado a transação com <code>COMMIT</code>.</p>\n<p><a name=\"listagem17\">Listagem 17</a>: Usando o comando <code>IN AUTONOMOUS TRANSACTION</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> CONN_LOG <span class=\"token punctuation\">(</span>USUARIO <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> EXCEPTION E_CONN <span class=\"token string\">'Acesso negado.'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> T_CONN <span class=\"token keyword\">ON</span> <span class=\"token keyword\">CONNECT</span> <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">IF</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CURRENT_USER</span> <span class=\"token operator\">&#x3C;></span> <span class=\"token string\">'SYSDBA'</span> <span class=\"token operator\">AND</span> <span class=\"token keyword\">CURRENT_USER</span> <span class=\"token operator\">&#x3C;></span> <span class=\"token string\">'ADMIN'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">THEN</span>\n  <span class=\"token keyword\">BEGIN</span>\n     <span class=\"token operator\">IN</span> AUTONOMOUS <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">DO</span>\n     <span class=\"token keyword\">BEGIN</span>\n        <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> CONN_LOG\n          <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CURRENT_USER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">END</span>\n\n     EXCEPTION E_CONN<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<p>O comando <code>EXECUTE STATEMENT</code> ganha algumas novidades importantes na versão 2.5. Uma delas é uma das funcionalidades mais pedidas pelos usuários: ler e atualizar dados em outros bancos de dados. Através da cláusula ON EXTERNAL DATA SOURCE é possível especificar o banco de dados em que o comando executará. É permitido também que o desenvolvedor especifique o nome, senha e role do usuário para fazer a conexão, e o funcionamento da transação iniciada para rodar o comando no banco de dados externo. Com WITH COMMON TRANSACTION (opção default), a transação da conexão externa é agrupada à transação interna atual e o comando <code>COMMIT</code> ou <code>ROLLBACK</code> executado na transação atual é propagado às transações externas. Com WITH AUTONOMOUS TRANSACTION o funcionamento se torna similar as transações autônomas, sendo feito o <code>COMMIT</code> ou <code>ROLLBACK</code> logo após a execução sucedida ou não do comando externo. A <a href=\"#listagem18\">listagem 18</a> mostra o uso deste comando para ler e gravar dados em outro banco de dados.</p>\n<p><a name=\"listagem18\">Listagem 18</a>: Executando comandos em outros bancos de dados com <code>EXECUTE STATEMENT</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> TERM <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span> BLOCK <span class=\"token keyword\">RETURNS</span> <span class=\"token punctuation\">(</span>NOME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n  <span class=\"token keyword\">DECLARE</span> BANCO <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'localhost:/db/pessoas.fdb'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">DECLARE</span> USUARIO <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SYSDBA'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">DECLARE</span> SENHA <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'masterke'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">DECLARE</span> NOME_INSERIR <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Sicrano'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">EXECUTE</span> STATEMENT <span class=\"token string\">'SELECT NOME FROM PESSOAS'</span>\n      <span class=\"token keyword\">ON</span> EXTERNAL <span class=\"token keyword\">DATA</span> SOURCE BANCO\n      <span class=\"token keyword\">AS</span> <span class=\"token keyword\">USER</span> USUARIO PASSWORD SENHA\n      <span class=\"token keyword\">INTO</span> NOME\n  <span class=\"token keyword\">DO</span>\n  <span class=\"token keyword\">BEGIN</span>\n      SUSPEND<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span>\n\n  <span class=\"token keyword\">EXECUTE</span> STATEMENT\n    <span class=\"token string\">'INSERT INTO PESSOAS (NOME) VALUES ('''</span> <span class=\"token operator\">||</span> NOME_INSERIR <span class=\"token operator\">||</span> <span class=\"token string\">''')'</span>\n    <span class=\"token keyword\">ON</span> EXTERNAL <span class=\"token keyword\">DATA</span> SOURCE BANCO\n    <span class=\"token keyword\">AS</span> <span class=\"token keyword\">USER</span> USUARIO PASSWORD SENHA\n    <span class=\"token keyword\">WITH</span> AUTONOMOUS <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<p>A <a href=\"#listagem18\">listagem 18</a> mostra como era feita a criação de strings de SQL dinâmico, usando concatenação de strings. A criação de comandos com concatenação é insegura, pois um usuário mal-intencionado pode gerar comandos não previstos pelo desenvolvedor, causando o ataque conhecido como injeção de SQL <a href=\"#nota1\">[1]</a>. No novo <code>EXECUTE STATEMENT</code> é possível passar parâmetros de duas formas diferentes. A <a href=\"#listagem19\">listagem 19</a> mostra o uso de parâmetros anônimos, com o símbolo de interrogação.</p>\n<p><a name=\"listagem19\">Listagem 19</a>: Usando <code>EXECUTE STATEMENT</code> com parâmetros anônimos.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> TERM <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span> BLOCK <span class=\"token keyword\">AS</span>\n  <span class=\"token keyword\">DECLARE</span> NOME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Sicrano'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">DECLARE</span> DATA_NASCIMENTO <span class=\"token keyword\">DATE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">DATE</span> <span class=\"token string\">'2000-01-01'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">EXECUTE</span> STATEMENT\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO PESSOAS (NOME, DATA_NASCIMENTO) VALUES (?, ?)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>NOME<span class=\"token punctuation\">,</span> DATA_NASCIMENTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<p>Além da passagem de parâmetros anônimos, o comando <code>EXECUTE STATEMENT</code> agora suporta o uso de parâmetros nomeados. As vantagens dos parâmetros nomeados são que o desenvolvedor não precisa se preocupar com a ordem e também pode usar um mesmo parâmetro mais de uma vez sem a necessidade de criação de variáveis. O uso dos parâmetros dentro da string é similar a passagem de parâmetros feita com o símbolo dois-pontos em bibliotecas Delphi, como expliquei na parte referente à construção <code>? IS NULL</code>. Os valores são associados aos nomes dos parâmetros usando-se o operador <code>:=</code> (dois pontos, igual). A <a href=\"#listagem20\">listagem 20</a> mostra o uso de parâmetros nomeados.</p>\n<p><a name=\"listagem20\">Listagem 20</a>: Usando <code>EXECUTE STATEMENT</code> com parâmetros nomeados.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> TERM <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span> BLOCK <span class=\"token keyword\">AS</span>\n  <span class=\"token keyword\">DECLARE</span> NOME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Sicrano'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">DECLARE</span> DATA_NASCIMENTO <span class=\"token keyword\">DATE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">DATE</span> <span class=\"token string\">'2000-01-01'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">EXECUTE</span> STATEMENT\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO PESSOAS (NOME, DATA_NASCIMENTO)</span>\n<span class=\"token string\">        VALUES (:P_NOME, :P_DATA_NASCIMENTO)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>P_DATA_NASCIMENTO :<span class=\"token operator\">=</span> DATA_NASCIMENTO<span class=\"token punctuation\">,</span> P_NOME :<span class=\"token operator\">=</span> NOME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token operator\">!</span>\n\n<span class=\"token keyword\">SET</span> TERM <span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>\n</code></pre></div>\n<h4>Nota</h4>\n<p><a name=\"nota1\">[1]</a> Injeção de SQL é o nome de um ataque em que o usuário mal-intencionado preenche dados de um formulário de forma que um comando gerado no servidor através de concatenação de strings seja alterado. Geralmente o ataque é feito usando-se aspas simples e um restante de código que termine o comando iniciado pelo desenvolvedor, seguindo com outro comando completo e o símbolo de início de comentário (<code>--</code>) para invalidar o restante do comando.</p>\n","layout":"post","title":"Artigo \"Novidades do Firebird 2.5\": Linguagem PSQL","published":true,"date":"2014-12-01T22:12:00.000-02:00","author":"Adriano dos Santos Fernandes","tags":["artigo","firebird"],"modified_time":"2014-12-01T22:12:10.938-02:00","blogger_id":"tag:blogger.com,1999:blog-3443854162607009076.post-2124904123484572315","blogger_orig_url":"http://asfernandes.blogspot.com/2014/12/artigo-novidades-do-firebird-25.html"}},"__N_SSG":true}