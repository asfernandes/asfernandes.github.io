{"pageProps":{"postData":{"id":["2022","01","21","firebird-psql-performance-trick-param-x-var"],"contentHtml":"<p>There is a small and easy PSQL trick that makes your code run much faster.</p>\n<p>Here is a simple code in its slower form:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">procedure</span> p1 <span class=\"token punctuation\">(</span>i1 <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">as</span>\n<span class=\"token keyword\">begin</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        i1 <span class=\"token operator\">=</span> i1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">execute</span> <span class=\"token keyword\">procedure</span> p1<span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>This code in my machine takes around 3.2 seconds to run in Firebird 4.</p>\n<p>Here is its BLR compiled code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-txt\"><code class=\"language-txt\">blr_version5,\nblr_begin,\n   blr_message, 0, 2,0,\n      blr_long, 0,\n      blr_short, 0,\n   blr_message, 1, 1,0,\n      blr_short, 0,\n   blr_receive, 0,\n      blr_begin,\n         blr_stall,\n         blr_label, 0,\n            blr_begin,\n               blr_begin,\n                  blr_label, 1,\n                     blr_loop,\n                        blr_begin,\n                           blr_if,\n                              blr_gtr,\n                                 blr_parameter2, 0, 0,0, 1,0,\n                                 blr_literal, blr_long, 0, 0,0,0,0,\n                              blr_assignment,\n                                 blr_subtract,\n                                    blr_parameter2, 0, 0,0, 1,0,\n                                    blr_literal, blr_long, 0, 1,0,0,0,\n                                 blr_parameter2, 0, 0,0, 1,0,\n                              blr_leave, 1,\n                           blr_end,\n                  blr_end,\n               blr_end,\n         blr_end,\n   blr_send, 1,\n      blr_begin,\n         blr_assignment,\n            blr_literal, blr_short, 0, 0,0,\n            blr_parameter, 1, 0,0,\n         blr_end,\n   blr_end,\nblr_eoc</code></pre></div>\n<p>What is more important in this code is usage of <code>blr_parameter2</code> inside <code>blr_loop</code>. <code>blr_parameter2</code> internals has two internal \"slots\", one for the value and another for an \"is null\" flag.</p>\n<p>So every time a parameter is read or assigned two slots must be accessed and the \"is null\" slot is accessed in a not very optimal way. It's kind of high level access using lower levels as building blocks. This for sure could be optimized in new versions.</p>\n<p>Variables has single slot with both information.</p>\n<p>Knowing that, let's change the code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">procedure</span> p2 <span class=\"token punctuation\">(</span>i1 <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">as</span>\n    <span class=\"token keyword\">declare</span> variable v1 <span class=\"token keyword\">integer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">begin</span>\n    v1 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        v1 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">execute</span> <span class=\"token keyword\">procedure</span> p2<span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>This code is apparently slower as it does an additional assignment but variables are faster to access than parameters.</p>\n<p>In my machine this code takes around 2.3 seconds to run.</p>\n<p>Here is its BLR:</p>\n<div class=\"remark-highlight\"><pre class=\"language-txt\"><code class=\"language-txt\">blr_version5,\nblr_begin,\n   blr_message, 0, 2,0,\n      blr_long, 0,\n      blr_short, 0,\n   blr_message, 1, 1,0,\n      blr_short, 0,\n   blr_receive, 0,\n      blr_begin,\n         blr_declare, 0,0, blr_long, 0,\n         blr_assignment,\n            blr_null,\n            blr_variable, 0,0,\n         blr_stall,\n         blr_label, 0,\n            blr_begin,\n               blr_begin,\n                  blr_assignment,\n                     blr_parameter2, 0, 0,0, 1,0,\n                     blr_variable, 0,0,\n                  blr_label, 1,\n                     blr_loop,\n                        blr_begin,\n                           blr_if,\n                              blr_gtr,\n                                 blr_variable, 0,0,\n                                 blr_literal, blr_long, 0, 0,0,0,0,\n                              blr_assignment,\n                                 blr_subtract,\n                                    blr_variable, 0,0,\n                                    blr_literal, blr_long, 0, 1,0,0,0,\n                                 blr_variable, 0,0,\n                              blr_leave, 1,\n                           blr_end,\n                  blr_end,\n               blr_end,\n         blr_end,\n   blr_send, 1,\n      blr_begin,\n         blr_assignment,\n            blr_literal, blr_short, 0, 0,0,\n            blr_parameter, 1, 0,0,\n         blr_end,\n   blr_end,\nblr_eoc</code></pre></div>\n<p>Now <code>blr_parameter2</code> run a single time (before <code>blr_loop</code>) and <code>blr_variable</code> is used in the loop.</p>\n<p>This trick is not necessary in <code>EXECUTE BLOCK</code> code.</p>\n<p>Firebird automatically does it in the generated BLR code.</p>\n<p>You might be wondering why it does not do it automatically in stored routines. If it does, a simple code (not accessing a parameter millions of times) would be a bit slower and if the routine is called many times the performance would be degraded.</p>\n","layout":"post","title":"Firebird PSQL performance trick: parameters x variables","published":true,"date":"2022-01-21","author":"Adriano dos Santos Fernandes","tags":["firebird"]}},"__N_SSG":true}