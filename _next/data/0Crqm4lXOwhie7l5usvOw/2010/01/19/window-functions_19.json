{"pageProps":{"postData":{"id":["2010","01","19","window-functions_19"],"contentHtml":"<p>By the SQL specification, window functions are a kind of aggregation, but which does not \"filter\" the result set of a query.\nThe aggregated data is mixed with the query result set. That sort of functions are used with the <code>OVER</code> clause. Users of Oracle also knows\nwindow functions as analytical functions.</p>\n<p>We have promissed very basic support for window functions in Firebird 3, which was the <code>OVER ()</code> clause using the current aggregate\nfunctions. With the <code>OVER ()</code> clause, one can mix with the query result set the aggregated data over the entire result set.\nLet me explain with an example.</p>\n<p>We have a table EMPLOYEE with columns ID, NAME and SALARY, and want to show each employee with his respective salary and the percentage of\nhis salary over the payroll. With a \"normal\" query, we would do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    salary<span class=\"token punctuation\">,</span>\n    salary <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">)</span> percentage\n  <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We need to repeat ourselves and wait so much to see the results. We can also make it hopefully faster using a cross join, but still the\nwhole employee table will need to be read more than one time. Change the table by a complex view or add various \"windows\" and we'll have a\nperformance problem for sure.</p>\n<p>The same query could be specified in much more elegant and faster way using a window function. Here is it how:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    salary<span class=\"token punctuation\">,</span>\n    salary <span class=\"token operator\">/</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> percentage\n  <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here, <code>sum(salary) over ()</code> is computed with the sum of all SALARY from the query (the employee table). This is what the <code>OVER ()</code>\nclause does.</p>\n<p>But the <code>OVER</code> clause is not just that, and now I've added another of its subclauses to Firebird. It's the <code>PARTITION</code> subclause.</p>\n<p>A partition is a way to make the <code>OVER</code> aggregation based on a GROUP. Its syntax is:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token operator\">&#x3C;</span>window <span class=\"token keyword\">function</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&#x3C;</span>expr<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&#x3C;</span>expr<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x3C;</span>expr<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>So now since the aggregation is done over a group, it could produce more than one row. So the result set generated by a partition is joined\nwith the main query using the same expression list of the partition.</p>\n<p>For a example, lets add to our employee table a ROLE column. Now we want the same information, but instead of see the percentage of the\nemployee salary over all employees, we want to see that value based on the employees occuping the same role. Here is how that query could\nbe written:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">,</span>\n    role<span class=\"token punctuation\">,</span>\n    salary<span class=\"token punctuation\">,</span>\n    salary <span class=\"token operator\">/</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> role<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">from</span> employee<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>With the current implementation, the query (without the window functions) is executed one time and cached. Extra aggregation is done on\nthis cached data. Partitions are joined by the new hash join algorithmn, and the main window (<code>OVER</code> without a partition) is joined through\na cross join with the main query.</p>\n<p>There is much more about window functions, but this subset seems to cover some major use cases of them.</p>\n","layout":"post","title":"Window Functions","published":true,"date":"2010-01-19","author":"Adriano dos Santos Fernandes","tags":["firebird"]}},"__N_SSG":true}