{"pageProps":{"postData":{"id":["2010","01","24","window-functions-part2-cumulative_24"],"contentHtml":"<p>Continuing with the <a href=\"/2010/01/19/window-functions_19.html\">window functions support for Firebird 3</a>, I have now added another <code>OVER</code>\nsub-clause: <code>ORDER BY</code>. The <code>ORDER BY</code> sub-clause can be used with or without partitions, and it makes aggregate functions return the\npartial aggregations as the records are being processed.</p>\n<p>Considering our employee table has this data:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"right\">salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">10.00</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">12.00</td>\n</tr>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">8.00</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"right\">9.00</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"right\">10.00</td>\n</tr>\n</tbody>\n</table>\n<p>And we run this query:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span> cum_salary\n  <span class=\"token keyword\">from</span> employee\n  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The result set produced will be:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"right\">salary</th>\n<th align=\"right\">cum_salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\">8.00</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"right\">9.00</td>\n<td align=\"right\">17.00</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">37.00</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">37.00</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">12.00</td>\n<td align=\"right\">49.00</td>\n</tr>\n</tbody>\n</table>\n<p>So cum_salary returns the partial/accumulated aggregation (of the <code>SUM</code> function). You may found strange the 37.00 repeated for the ids\n1 and 5, but that is how it should work. The <code>ORDER BY</code> keys are grouped together and the aggregation is computed once (but summing the\ntwo 10.00).</p>\n<p>You can use multiple windows with different orders, and <code>ORDER BY</code> parts like <code>DESC</code>, <code>NULLS LAST</code>, etc. Here is a weird example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span> cum_salary<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> cum_salary_desc\n  <span class=\"token keyword\">from</span> employee\n  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The result set produced will be:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"right\">salary</th>\n<th align=\"right\">cum_salary</th>\n<th align=\"right\">cum_salary_desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\">49.00</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"right\">9.00</td>\n<td align=\"right\">17.00</td>\n<td align=\"right\">41.00</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">37.00</td>\n<td align=\"right\">32.00</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">37.00</td>\n<td align=\"right\">32.00</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">12.00</td>\n<td align=\"right\">49.00</td>\n<td align=\"right\">12.00</td>\n</tr>\n</tbody>\n</table>\n<p>With a partition <code>ORDER BY</code> works the same way, but at each partition boundary the aggregation is reset.</p>\n<p>All aggregation functions are usable with <code>ORDER BY</code>, except the <code>LIST</code> function. As <code>LIST</code> returns blob, it would be slow to return\nmultiple blobs (one for each order group), trick to implement, and I don't see an usage scenario for it.</p>\n","layout":"post","title":"Window Functions (part2) - cumulative aggregates","published":true,"date":"2010-01-24","author":"Adriano dos Santos Fernandes","tags":["firebird"]}},"__N_SSG":true}