{"pageProps":{"postData":{"id":["2010","02","19","window-functions-part3-new-functions"],"contentHtml":"<p>In the <a href=\"/2010/01/19/window-functions_19.html\">first</a> and the <a href=\"/2010/01/24/window-functions-part2-cumulative_24.html\">second</a> part of window\nfunction series, I talked about the <code>OVER</code> clause, with/without partitions and with/without ordering. Till then, no new function had been\nintroduced, so it has about the already existing aggregate functions.</p>\n<p>Now, new window-only functions has been introduced. I'll separate them in two groups: ranking and navigational. Both set of functions can\nbe used with/without partition/ordering, but them does not make much sense without ordering.</p>\n<h3>Ranking functions (DENSE_RANK, RANK and ROW_NUMBER)</h3>\n<p>With these functions, one can create different type of incremental counters. Think about <code>SUM(1) OVER (ORDER BY SALARY)</code>, these functions\ndoes this type of thing, but all of them in different ways. Lets see an example query, also comparing with the <code>SUM</code> behavior.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span>\n    salary<span class=\"token punctuation\">,</span>\n    dense_rank<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    rank<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    row_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">from</span> employee\n  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And the result set:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"right\">salary</th>\n<th align=\"right\">dense_rank</th>\n<th align=\"right\">rank</th>\n<th align=\"right\">row_number</th>\n<th align=\"right\">sum</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\">1</td>\n<td align=\"right\">1</td>\n<td align=\"right\">1</td>\n<td align=\"right\">1</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"right\">9.00</td>\n<td align=\"right\">2</td>\n<td align=\"right\">2</td>\n<td align=\"right\">2</td>\n<td align=\"right\">2</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">3</td>\n<td align=\"right\">3</td>\n<td align=\"right\">3</td>\n<td align=\"right\">4</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">3</td>\n<td align=\"right\">3</td>\n<td align=\"right\">4</td>\n<td align=\"right\">4</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">12.00</td>\n<td align=\"right\">4</td>\n<td align=\"right\">5</td>\n<td align=\"right\">5</td>\n<td align=\"right\">5</td>\n</tr>\n</tbody>\n</table>\n<p>As you see, the functions differs when repeated values are found in the order key (the salary of 10.00). With <code>DENSE_RANK</code>, no gaps are\ncreated and all repeated values receive the same counter. With <code>RANK</code>, the initial counter is used for all repeated values, but it make\ngaps so the next non-repeating value (the salary of 12.00) does not consider the previously repeated values as in different positions.\nWith <code>ROW_NUMBER</code>, each line receives an incremental value. And <code>SUM(1)</code> is very like <code>RANK</code>, but the value is computed after all repeated\nvalues are summed, so the gap is before the repeated values.</p>\n<h3>Navigational functions (LAG and LEAD)</h3>\n<p>With these functions, an expression could get the value of a previously (<code>LAG</code>) or a posterior (<code>LEAD</code>) row of the query. Follow the\ndemonstrating query.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n    id<span class=\"token punctuation\">,</span>\n    salary<span class=\"token punctuation\">,</span>\n    lag<span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lead<span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">from</span> employee\n  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> salary<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And the result set:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"right\">salary</th>\n<th align=\"right\">lag</th>\n<th align=\"right\">lead</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\"><code>&#x3C;null></code></td>\n<td align=\"right\">9.00</td>\n</tr>\n<tr>\n<td align=\"right\">4</td>\n<td align=\"right\">9.00</td>\n<td align=\"right\">8.00</td>\n<td align=\"right\">10.00</td>\n</tr>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">9.00</td>\n<td align=\"right\">10.00</td>\n</tr>\n<tr>\n<td align=\"right\">5</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\">12.00</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">12.00</td>\n<td align=\"right\">10.00</td>\n<td align=\"right\"><code>&#x3C;null></code></td>\n</tr>\n</tbody>\n</table>\n<p>The functions have a second argument, that is implicitly 1, which means the number of previously/posterior rows will be queried. If this\nrow does not exist, <code>&#x3C;null></code> is returned.</p>\n<p>And of course, you can use these functions as expressions and compute, for example, the difference of an employee salary from the one\ngreater and/or lesser.</p>\n","layout":"post","title":"Window functions (part3) - new functions","published":true,"date":"2010-02-19","author":"Adriano dos Santos Fernandes","tags":["firebird"]}},"__N_SSG":true}